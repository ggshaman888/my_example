#include <QSqlDatabase>
#include <QSqlQuery>
#include <QDebug>
#include <QSqlError>
#include <QDateTime>
#include <QSqlRecord>
#include "sqlseterp.h"
#include "../erp/generatedmacaddres.h"

SQLSetERP::SQLSetERP(QObject* parent) : QObject(parent) {}

void SQLSetERP::setDB(QSqlDatabase is_db)
{
    db = &is_db;
}

bool SQLSetERP::createTableLink()
{
    QSqlQuery query(*db);
    QString request = QString("CREATE TABLE link ("
                              "   id int GENERATED BY DEFAULT AS IDENTITY "
                              "PRIMARY KEY, "
                              "   uid_fl int, "
                              "   mac_fl text UNIQUE, "
                              "   start_fl timestamp, "
                              "   end_fl timestamp);");
    query.exec(request);

    last_error = query.lastError().text();
    last_query = query.lastQuery();

    emit runSignalReqest();

    if (!last_error.isEmpty()) {
        return false;
    }
    return true;
}

bool SQLSetERP::createTableUserFL()
{
    QSqlQuery query(*db);
    QString request = QString("CREATE TABLE user_fl ("
                              "   id int GENERATED BY DEFAULT AS IDENTITY "
                              "PRIMARY KEY, "
                              "   login_fl text UNIQUE, "
                              "   password_fl text);");
    query.exec(request);

    last_error = query.lastError().text();
    last_query = query.lastQuery();

    emit runSignalReqest();

    if (!last_error.isEmpty()) {
        return false;
    }
    return true;
}

bool SQLSetERP::createTableUserAccess()
{
    QSqlQuery query(*db);
    QString request = QString("CREATE TABLE user_access ("
                              "   id int GENERATED BY DEFAULT AS IDENTITY "
                              "PRIMARY KEY, "
                              "   user_fl_id int REFERENCES user_fl (id), "
                              "   start_fl timestamptz, "
                              "   end_fl timestamptz);");
    query.exec(request);

    last_error = query.lastError().text();
    last_query = query.lastQuery();

    emit runSignalReqest();

    if (!last_error.isEmpty()) {
        return false;
    }
    return true;
}

bool SQLSetERP::insertMacRange(QString mac_start, QString mac_end)
{
    GeneratedMacAddres gen_m;
    if (gen_m.genRange(mac_start, mac_end).isEmpty()) {
        return true;
    }
    return false;
}


void SQLSetERP::runSignalReqest()
{
    if (!last_error.isEmpty()) {
        emit lastError(last_error);
    }
    if (!last_query.isEmpty()) {
        emit lastQuery(last_query);
    }
    qDebug() << last_error << last_query;
}
